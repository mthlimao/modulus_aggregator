import os
import click
import pandas as pd
from pathlib import Path
from modulus_aggregator.constants import RUN_PATH_NOT_FOUND, EXPORT_ERROR, WIDE_DF_NOT_POSSIBLE
from modulus_aggregator.utils import return_event_accumulator_object


@click.group()
def export():
    """Group of commands 'export'."""
    pass


@export.command()
@click.option('-mp', '--models_path', type=click.Path(exists=True), nargs=1, required=True,
              help="Path where the Modulus' experiment models are saved. "
                   "Each subpath of the experiment path will be related to a single run. " 
                   "The experiment path could be, for example, the 'outputs' or " 
                   "the 'multirun' directories generated by Modulus. "
                   "For now, this option is mandatory.")
@click.option('--export_pivot', is_flag=True,
              help="Option that enables exporting .csv file in pivoted (wide) form. "
                   "In case it's not possible to export in pivoted form, file is then "
                   "exported in standard format.")
def tensors(models_path, export_pivot):
    """
    This command export the registered tensors in a .csv file.
    """
    try:
        df_tensors = None
        models_path = Path(models_path).resolve(strict=True)
        
        for run in os.listdir(models_path):
            run_path = models_path / run            
            if run_path.is_dir():
                click.echo(f'Exporting tensors for {run_path.name}...')                
                ea_object = return_event_accumulator_object(run_path)
                
                df_run = write_to_dataframe(run_path, ea_object)
                df_tensors = pd.concat([df_tensors, df_run], axis=0) if df_tensors is not None else df_run        

        if not export_pivot:
            df_tensors.to_csv(models_path / f'{models_path.name}_tensors.csv', index=False, sep=';')
        else:
            df_tensors_wide = return_pivoted_dataframe(df_tensors)
            if df_tensors_wide.shape == df_tensors.shape:
                click.echo(WIDE_DF_NOT_POSSIBLE)
                df_tensors.to_csv(models_path / f'{models_path.name}_tensors.csv', index=False, sep=';')
            else:
                df_tensors_wide.to_csv(models_path / f'{models_path.name}_tensors_pivoted.csv', index=False, sep=';')
        
        click.echo('Tensors successfully exported.')
    
    except FileNotFoundError:
        click.echo(RUN_PATH_NOT_FOUND)
    
    except:
        click.echo(EXPORT_ERROR)


def write_to_dataframe(run_path, event_accumulator_object):
    # Iterate through tensors
    tensors_dict = {
        'run' : [],
        'tag' : [],
        'step' : [],
        'value' : [],
        'wall_time' : [],
    }

    for t in event_accumulator_object.Tags()['tensors']:
        if len(event_accumulator_object.Tensors(t)[0].tensor_proto.float_val) > 0:
            for tensor_event in event_accumulator_object.Tensors(t):
                tensors_dict['run'].append(run_path.name)
                tensors_dict['tag'].append(t)
                tensors_dict['step'].append(tensor_event.step)
                tensors_dict['value'].append(tensor_event.tensor_proto.float_val[0])
                tensors_dict['wall_time'].append(tensor_event.wall_time)
    
    df_tensors = pd.DataFrame(tensors_dict)

    return df_tensors


def return_pivoted_dataframe(df_tensors):
    # Pivot dataframe
    dfw_data_dict = {'run': [], 'step': [], 'wall_time':[]}
    dfw = pd.DataFrame(dfw_data_dict)

    for tag in df_tensors["tag"].unique():
        df_tag = df_tensors[df_tensors['tag'] == tag]

        if dfw.shape[0] == 0:
            dfw['run'] = df_tag.loc[:, 'run']
            dfw['step'] = df_tag.loc[:, 'step']
            dfw['wall_time'] = df_tag.loc[:, 'wall_time']
        
        if df_tag.loc[:, 'value'].values.shape[0] == dfw.shape[0]:
            dfw[tag] = df_tag.loc[:, 'value'].values
        else:            
            return df_tensors
    
    return dfw
